import streamlit as st
import hashlib
import sqlite3
import os
from PIL import Image
import pandas as pd
import matplotlib.pyplot as plt
from datetime import datetime

# --- –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã ---
AVATAR_DIR = "avatars"
os.makedirs(AVATAR_DIR, exist_ok=True)

# --- –Ø–∑—ã–∫ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ ---
if 'lang' not in st.session_state:
    st.session_state["lang"] = "ru"
if 'salt' not in st.session_state:
    st.session_state["salt"] = st.secrets["salt"]

texts = {
    "signup": {"ru": "–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è", "en": "Sign Up", "by": "–†—ç–≥—ñ—Å—Ç—Ä–∞—Ü—ã—è"},
    "signin": {"ru": "–í—Ö–æ–¥", "en": "Log In", "by": "–£–≤–∞–π—Å—Ü—ñ"},
    "login": {"ru": "–õ–æ–≥–∏–Ω", "en": "Login", "by": "–õ–∞–≥—ñ–Ω"},
    "email": {"ru": "–≠–ª–µ–∫—Ç—Ä–æ–Ω–Ω–∞—è –ø–æ—á—Ç–∞", "en": "Email", "by": "–≠–ª–µ–∫—Ç—Ä–æ–Ω–Ω–∞—è –ø–æ—à—Ç–∞"},
    "password": {"ru": "–ü–∞—Ä–æ–ª—å", "en": "Password", "by": "–ü–∞—Ä–æ–ª—å"},
    "submit_signup": {"ru": "–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è", "en": "Sign Up", "by": "–ó–∞—Ä—ç–≥—ñ—Å—Ç—Ä–∞–≤–∞—Ü—Ü–∞"},
    "submit_signin": {"ru": "–í–æ–π—Ç–∏", "en": "Log In", "by": "–£–≤–∞–π—Å—Ü—ñ"},
    "success_signup": {"ru": "–í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã!", "en": "You have successfully signed up!", "by": "–í—ã –ø–∞—Å–ø—è—Ö–æ–≤–∞ –∑–∞—Ä—ç–≥—ñ—Å—Ç—Ä–∞–≤–∞–ª—ñ—Å—è!"},
    "success_signin": {"ru": "–í—Ö–æ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ!", "en": "Logged in successfully!", "by": "–£–≤–∞—Ö–æ–¥ –≤—ã–∫–∞–Ω–∞–Ω—ã –ø–∞—Å–ø—è—Ö–æ–≤–∞!"},
    "error_signin": {"ru": "–ù–µ–≤–µ—Ä–Ω—ã–π –ª–æ–≥–∏–Ω –∏–ª–∏ –ø–∞—Ä–æ–ª—å.", "en": "Invalid login or password.", "by": "–ù—è–ø—Ä–∞–≤—ñ–ª—å–Ω—ã –ª–∞–≥—ñ–Ω –∞–±–æ –ø–∞—Ä–æ–ª—å."}
}

def t(key):
    lang = st.session_state["lang"]
    return texts.get(key, {}).get(lang, key)

# --- –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ë–î ---
def init_db():
    conn = sqlite3.connect("users.db")
    cur = conn.cursor()
    cur.execute("""
        CREATE TABLE IF NOT EXISTS users (
            login TEXT PRIMARY KEY,
            email TEXT,
            password_hash TEXT,
            signup_date TEXT,
            last_login TEXT
        )
    """)
    cur.execute("""
        CREATE TABLE IF NOT EXISTS user_profiles (
            username TEXT PRIMARY KEY,
            nickname TEXT,
            status TEXT,
            avatar_path TEXT,
            about_me TEXT
        )
    """)
    cur.execute("""
        CREATE TABLE IF NOT EXISTS task_stats (
            username TEXT,
            date TEXT,
            solved_tasks INTEGER
        )
    """)

    # --- –ú–∏–≥—Ä–∞—Ü–∏–∏ ---
    cur.execute("PRAGMA table_info(users)")
    user_columns = [row[1] for row in cur.fetchall()]
    if "signup_date" not in user_columns:
        cur.execute("ALTER TABLE users ADD COLUMN signup_date TEXT")
    if "last_login" not in user_columns:
        cur.execute("ALTER TABLE users ADD COLUMN last_login TEXT")

    cur.execute("PRAGMA table_info(user_profiles)")
    profile_columns = [row[1] for row in cur.fetchall()]
    if "about_me" not in profile_columns:
        cur.execute("ALTER TABLE user_profiles ADD COLUMN about_me TEXT")

    conn.commit()
    conn.close()

init_db()

# --- –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è ---
def create_user(login, email, password_hash):
    conn = sqlite3.connect("users.db")
    cur = conn.cursor()
    now = datetime.utcnow().isoformat()
    try:
        cur.execute("""
            INSERT INTO users (login, email, password_hash, signup_date, last_login)
            VALUES (?, ?, ?, ?, ?)
        """, (login, email, password_hash, now, now))
        cur.execute("INSERT INTO user_profiles (username) VALUES (?)", (login,))
        conn.commit()
        return True
    except sqlite3.IntegrityError:
        return False
    finally:
        conn.close()

def authenticate_user(login, password_hash):
    conn = sqlite3.connect("users.db")
    cur = conn.cursor()
    cur.execute("SELECT * FROM users WHERE login = ? AND password_hash = ?", (login, password_hash))
    user = cur.fetchone()
    if user:
        now = datetime.utcnow().isoformat()
        cur.execute("UPDATE users SET last_login = ? WHERE login = ?", (now, login))
        conn.commit()
    conn.close()
    return user is not None

# --- –ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ---
def get_user_profile(username):
    conn = sqlite3.connect("users.db")
    cur = conn.cursor()
    cur.execute("SELECT nickname, status, avatar_path, about_me FROM user_profiles WHERE username = ?", (username,))
    row = cur.fetchone()
    conn.close()
    return row if row else ("", "", "", "")

def save_user_profile(username, nickname, status, avatar_path=None, about_me=""):
    conn = sqlite3.connect("users.db")
    cur = conn.cursor()
    if avatar_path:
        cur.execute("""
            INSERT INTO user_profiles (username, nickname, status, avatar_path, about_me)
            VALUES (?, ?, ?, ?, ?)
            ON CONFLICT(username) DO UPDATE SET nickname=excluded.nickname, status=excluded.status, avatar_path=excluded.avatar_path, about_me=excluded.about_me
        """, (username, nickname, status, avatar_path, about_me))
    else:
        cur.execute("""
            INSERT INTO user_profiles (username, nickname, status, about_me)
            VALUES (?, ?, ?, ?)
            ON CONFLICT(username) DO UPDATE SET nickname=excluded.nickname, status=excluded.status, about_me=excluded.about_me
        """, (username, nickname, status, about_me))
    conn.commit()
    conn.close()

def get_task_stats(username):
    conn = sqlite3.connect("users.db")
    df = pd.read_sql_query("SELECT date, solved_tasks FROM task_stats WHERE username = ?", conn, params=(username,))
    conn.close()
    if not df.empty:
        df['date'] = pd.to_datetime(df['date'])
    return df

# --- –ì–ª–∞–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞ ---
if "username" not in st.session_state:
    tab1, tab2 = st.tabs([t("signin"), t("signup")])

    with tab1:
        st.header(t("signin"))
        with st.form("signin_form"):
            login = st.text_input(t("login"))
            password = st.text_input(t("password"), type="password")
            submit = st.form_submit_button(t("submit_signin"))

            if submit:
                salted_pass = st.session_state["salt"] + password
                password_hash = hashlib.sha256(salted_pass.encode()).hexdigest()
                if authenticate_user(login, password_hash):
                    st.session_state["username"] = login
                    st.success(t("success_signin"))
                    st.rerun()
                else:
                    st.error(t("error_signin"))

    with tab2:
        st.header(t("signup"))
        with st.form("signup_form"):
            login = st.text_input(t("login"), key="signup_login")
            email = st.text_input(t("email"))
            password = st.text_input(t("password"), type="password")
            submit = st.form_submit_button(t("submit_signup"))

            if submit:
                salted_pass = st.session_state["salt"] + password
                password_hash = hashlib.sha256(salted_pass.encode()).hexdigest()
                success = create_user(login, email, password_hash)
                if success:
                    st.session_state["username"] = login
                    st.success(t("success_signup"))
                    st.rerun()
                else:
                    st.error(f"{t('login')} {login} {t('error_signin')}")
else:
    username = st.session_state["username"]
    nickname, status, avatar_path, about_me = get_user_profile(username)

    st.title("üë§ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞–∫–∫–∞—É–Ω—Ç–æ–º")
    st.write(f"–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, **{username}**!")

    # –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞—Ç—ã —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –∏ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –≤—Ö–æ–¥–∞
    conn = sqlite3.connect("users.db")
    cur = conn.cursor()
    cur.execute("SELECT signup_date, last_login FROM users WHERE login = ?", (username,))
    signup_date, last_login = cur.fetchone()
    conn.close()

    st.info(f"üìÖ –î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {signup_date}")
    st.info(f"üïí –ü–æ—Å–ª–µ–¥–Ω–∏–π –≤—Ö–æ–¥: {last_login}")

    col1, col2 = st.columns([1, 3])

    with col1:
        st.subheader("–ê–≤–∞—Ç–∞—Ä")
        if avatar_path and os.path.exists(avatar_path):
            st.image(avatar_path, width=120)
        else:
            st.image("https://via.placeholder.com/120", width=120)

        uploaded_file = st.file_uploader("–ó–∞–≥—Ä—É–∑–∏—Ç—å –∞–≤–∞—Ç–∞—Ä", type=["png", "jpg", "jpeg"])
        if uploaded_file:
            ext = os.path.splitext(uploaded_file.name)[1].lower()
            avatar_path = os.path.join(AVATAR_DIR, f"{username}{ext}")
            with open(avatar_path, "wb") as f:
                f.write(uploaded_file.read())
            save_user_profile(username, nickname, status, avatar_path, about_me)
            st.success("–ê–≤–∞—Ç–∞—Ä –æ–±–Ω–æ–≤–ª—ë–Ω!")
            st.rerun()

    with col2:
        st.subheader("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø—Ä–æ—Ñ–∏–ª—è")
        with st.form("profile_form"):
            nickname_input = st.text_input("–ù–∏–∫–Ω–µ–π–º", value=nickname)
            status_input = st.text_input("–°—Ç–∞—Ç—É—Å", value=status, help="–ù–∞–ø—Ä–∏–º–µ—Ä: '–ù–∞—á–∏–Ω–∞—é—â–∏–π —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫'")
            about_me_input = st.text_area("–û —Å–µ–±–µ (Markdown –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è)", value=about_me)
            save_profile = st.form_submit_button("üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è")
            if save_profile:
                save_user_profile(username, nickname_input, status_input, avatar_path, about_me_input)
                st.success("–ü—Ä–æ—Ñ–∏–ª—å —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω—ë–Ω!")
                st.rerun()

    st.subheader("üìù –û —Å–µ–±–µ")
    if about_me:
        st.markdown(about_me)
    else:
        st.info("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –µ—â—ë –Ω–µ –¥–æ–±–∞–≤–∏–ª –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–µ–±–µ.")

    st.divider()
    if st.button("üö™ –í—ã–π—Ç–∏ –∏–∑ –∞–∫–∫–∞—É–Ω—Ç–∞"):
        st.session_state.clear()
        st.success("–í—ã –≤—ã—à–ª–∏ –∏–∑ –∞–∫–∫–∞—É–Ω—Ç–∞!")
        st.rerun()









#    st.subheader("üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ä–µ—à—ë–Ω–Ω—ã—Ö –∑–∞–¥–∞—á")
#    task_stats_df = get_task_stats(username)
#
#    if not task_stats_df.empty:
#        task_stats_df = task_stats_df.sort_values("date")
#        fig, ax = plt.subplots()
#        ax.plot(task_stats_df["date"], task_stats_df["solved_tasks"], marker="o", linestyle="-")
#        ax.set_title("–ü—Ä–æ–≥—Ä–µ—Å—Å –ø–æ —Ä–µ—à—ë–Ω–Ω—ã–º –∑–∞–¥–∞—á–∞–º")
#        ax.set_xlabel("–î–∞—Ç–∞")
#        ax.set_ylabel("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–¥–∞—á")
#        ax.grid(True)
#        st.pyplot(fig)
#    else:
#        st.info("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ —Ä–µ—à—ë–Ω–Ω—ã—Ö –∑–∞–¥–∞—á–∞—Ö. –ù–∞—á–Ω–∏—Ç–µ —Ä–µ—à–∞—Ç—å –∑–∞–¥–∞—á–∏, —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å!")


