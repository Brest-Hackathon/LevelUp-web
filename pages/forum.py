import streamlit as st
import sqlite3
import os
from datetime import datetime

AVATAR_PLACEHOLDER = "https://via.placeholder.com/80"

# --- –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤—ã—Ö –∫–æ–ª–æ–Ω–æ–∫ –≤ —Ç–∞–±–ª–∏—Ü–µ user_profiles, –µ—Å–ª–∏ –æ–Ω–∏ –µ—â–µ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç ---
def add_columns_to_user_profiles():
    conn = sqlite3.connect('users.db')
    cur = conn.cursor()

    # –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–ª–æ–Ω–∫–∏, –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç
    try:
        cur.execute("""
        ALTER TABLE user_profiles
        ADD COLUMN last_login TEXT;
        """)
    except sqlite3.OperationalError:
        pass  # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫—É, –µ—Å–ª–∏ –∫–æ–ª–æ–Ω–∫–∞ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç

    try:
        cur.execute("""
        ALTER TABLE user_profiles
        ADD COLUMN signup_date TEXT;
        """)
    except sqlite3.OperationalError:
        pass  # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫—É, –µ—Å–ª–∏ –∫–æ–ª–æ–Ω–∫–∞ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç

    try:
        cur.execute("""
        ALTER TABLE user_profiles
        ADD COLUMN description TEXT;
        """)
    except sqlite3.OperationalError:
        pass  # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫—É, –µ—Å–ª–∏ –∫–æ–ª–æ–Ω–∫–∞ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç

    conn.commit()
    conn.close()

add_columns_to_user_profiles()

# --- –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–µ–π ---
def search_users_by_nickname(query):
    conn = sqlite3.connect("users.db")
    cur = conn.cursor()
    cur.execute("""
        SELECT username, nickname, avatar_path FROM user_profiles
        WHERE nickname LIKE ?
        ORDER BY nickname COLLATE NOCASE
    """, (f"%{query}%",))
    results = cur.fetchall()
    conn.close()
    return results

# --- –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ ---
def get_user_info(username):
    conn = sqlite3.connect("users.db")
    cur = conn.cursor()
    cur.execute("""
        SELECT username, nickname, avatar_path, status, last_login, signup_date, description
        FROM user_profiles
        WHERE username = ?
    """, (username,))
    result = cur.fetchone()
    conn.close()
    return result

# --- –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ---
def register_user(username, nickname, password, status):
    conn = sqlite3.connect('users.db')
    cur = conn.cursor()

    signup_date = datetime.now().strftime('%Y-%m-%d')
    last_login = signup_date  # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º last_login –≤ –º–æ–º–µ–Ω—Ç —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
    description = ""  # Default description if not provided

    cur.execute("""
    INSERT INTO user_profiles (username, nickname, password, status, signup_date, last_login, description)
    VALUES (?, ?, ?, ?, ?, ?, ?)
    """, (username, nickname, password, status, signup_date, last_login, description))

    conn.commit()
    conn.close()

# --- –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –≤—Ö–æ–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ---
def update_last_login(username):
    conn = sqlite3.connect('users.db')
    cur = conn.cursor()

    last_login = datetime.now().strftime('%Y-%m-%d %H:%M:%S')

    cur.execute("""
    UPDATE user_profiles
    SET last_login = ?
    WHERE username = ?
    """, (last_login, username))

    conn.commit()
    conn.close()

# --- –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å ---
st.title("üîé –ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")

# –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞ –∫–∞–∫–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ –º—ã –Ω–∞—Ö–æ–¥–∏–º—Å—è
if "selected_user" in st.session_state:
    username = st.session_state["selected_user"]
    
    # –î–æ–±–∞–≤–∏–º –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥"
    if st.button("‚óÄÔ∏è –ù–∞–∑–∞–¥ –∫ –ø–æ–∏—Å–∫—É"):
        del st.session_state["selected_user"]
        st.rerun()

    # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ—Ñ–∏–ª–µ
    user = get_user_info(username)
    if user:
        username, nickname, avatar_path, status, last_login, signup_date, description = user
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫–æ–ª–æ–Ω–∫–∏ –¥–ª—è –∫—Ä–∞—Å–∏–≤–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
        col1, col2 = st.columns([1, 5])
        with col1:
            if avatar_path and os.path.exists(avatar_path):
                st.image(avatar_path, width=100)
            else:
                st.image(AVATAR_PLACEHOLDER, width=100)
        
        with col2:
            st.title(f"üë§ –ü—Ä–æ—Ñ–∏–ª—å: {nickname or username}")
            st.markdown(f"**–ù–∏–∫–Ω–µ–π–º:** {nickname}")
            st.markdown(f"**Username:** @{username}")
            st.markdown(f"**–°—Ç–∞—Ç—É—Å:** {status}")

            # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
            st.subheader("–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è")

            # Safely display dates
            if signup_date:
                try:
                    st.markdown(f"**–î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:** {datetime.strptime(signup_date, '%Y-%m-%d').strftime('%d %B %Y')}")
                except ValueError:
                    st.markdown("**–î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:** –ù–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –¥–∞—Ç–∞")
            else:
                st.markdown("**–î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:** –ù–µ —É–∫–∞–∑–∞–Ω–∞")

            if last_login:
                try:
                    st.markdown(f"**–ü–æ—Å–ª–µ–¥–Ω–∏–π –≤—Ö–æ–¥:** {datetime.strptime(last_login, '%Y-%m-%d %H:%M:%S').strftime('%d %B %Y, %H:%M')}")
                except ValueError:
                    st.markdown("**–ü–æ—Å–ª–µ–¥–Ω–∏–π –≤—Ö–æ–¥:** –ù–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –¥–∞—Ç–∞")
            else:
                st.markdown("**–ü–æ—Å–ª–µ–¥–Ω–∏–π –≤—Ö–æ–¥:** –ù–µ –±—ã–ª –≤—ã–ø–æ–ª–Ω–µ–Ω")

            # Safely handle description
            if description:
                st.markdown(f"**–û–ø–∏—Å–∞–Ω–∏–µ:** {description}")
            else:
                st.markdown("**–û–ø–∏—Å–∞–Ω–∏–µ:** –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç")

    else:
        st.error("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
else:
    # –°—Ç—Ä–∞–Ω–∏—Ü–∞ –ø–æ–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    search_query = st.text_input("–í–≤–µ–¥–∏—Ç–µ –Ω–∏–∫–Ω–µ–π–º –¥–ª—è –ø–æ–∏—Å–∫–∞")

    if search_query:
        users = search_users_by_nickname(search_query)
        if users:
            st.subheader("–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞:")
            for username, nickname, avatar_path in users:
                col1, col2 = st.columns([1, 5])
                with col1:
                    if avatar_path and os.path.exists(avatar_path):
                        st.image(avatar_path, width=80)
                    else:
                        st.image(AVATAR_PLACEHOLDER, width=80)
                with col2:
                    st.subheader(nickname or username)
                    st.write(f"@{username}")
                    if st.button(f"üîç –û—Ç–∫—Ä—ã—Ç—å –ø—Ä–æ—Ñ–∏–ª—å {nickname or username}", key=username):
                        st.session_state["selected_user"] = username
                        st.rerun()  # –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É, —á—Ç–æ–±—ã –ø–æ–∫–∞–∑–∞—Ç—å –ø—Ä–æ—Ñ–∏–ª—å
        else:
            st.info("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
    else:
        st.info("–í–≤–µ–¥–∏—Ç–µ —á–∞—Å—Ç—å –Ω–∏–∫–Ω–µ–π–º–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞.")
